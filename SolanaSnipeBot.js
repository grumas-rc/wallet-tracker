const {
    Connection,
    PublicKey,
    Keypair,
    Transaction,
    ComputeBudgetProgram,
    LAMPORTS_PER_SOL
} = require('@solana/web3.js');
const {getMint} = require('@solana/spl-token');
const WebSocket = require('ws');
const axios = require('axios');
const {API_URLS} = require('@raydium-io/raydium-sdk-v2');
require('dotenv').config();

class SolanaSnipeBot {
    constructor() {
        // ‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ù–ê–ë–û–† –ü–ï–†–ï–ú–ï–ù–ù–´–•
        this.connection = new Connection(process.env.RPC_URL, 'confirmed');
        this.wallet = Keypair.fromSecretKey(Uint8Array.from(JSON.parse(process.env.PRIVATE_KEY)));
        this.targetWallet = new PublicKey(process.env.TARGET_WALLET);
        this.wsConnection = null;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.minTransferLamports = 400 * 1e9; // 400 SOL
        this.config = {
            quoteAmount: parseFloat(process.env.QUOTE_AMOUNT),
            slippage: parseInt(process.env.BUY_SLIPPAGE),
        };

        // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.lastBalance = null;
        this.pendingTokens = new Map(); // mint -> info
        this.processedSignatures = new Set();
        this.mintCache = new Map();

        // RPC –∫–æ–Ω—Ç—Ä–æ–ª—å
        this.rpcDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É RPC
        this.lastRpcTime = 0;

        // ‚úÖ PING/PONG HEARTBEAT
        this.pingInterval = null;
        this.pongTimeout = null;
        this.isAlive = false;
        this.pingIntervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.pongTimeoutMs = 10000;  // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏–µ pong
        // ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–´–ô HEARTBEAT
        this.lastActivity = Date.now();
        this.activityBasedPing = true; // –í–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    }

    async initialize() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Solana Snipe Bot');
        console.log(`üéØ Target: ${this.targetWallet.toString()}`);
        console.log(`üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ${this.minTransferLamports / 1e9} SOL`);
        await this.fetchInitialBalance();
        await this.startWebSocket();
    }
    async fetchInitialBalance() {
        const lamports = await this.connection.getBalance(this.targetWallet, 'confirmed');
        this.lastBalance = lamports;
        console.log(`üîé –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${(lamports / LAMPORTS_PER_SOL).toFixed(6)} SOL (${lamports} lamports)`);
    }
    // ‚úÖ WebSocket
    async startWebSocket() {
        this.wsConnection = new WebSocket(process.env.WS_URL);

        this.wsConnection.on('open', () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            this.isAlive = true;
            this.subscribe();
            this.startHeartbeat(); // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
        });

        this.wsConnection.on('message', async (data) => {
            try {
                const message = JSON.parse(data.toString());
                await this.handleMessage(message);
            } catch (error) {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
            }
        });

        // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê PONG –û–¢–í–ï–¢–ê
        this.wsConnection.on('pong', () => {
            console.log('üèì –ü–æ–ª—É—á–µ–Ω pong - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ');
            this.isAlive = true;

            // –û—á–∏—â–∞–µ–º timeout –æ–∂–∏–¥–∞–Ω–∏—è pong
            if (this.pongTimeout) {
                clearTimeout(this.pongTimeout);
                this.pongTimeout = null;
            }
        });

        // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê PING –û–¢ –°–ï–†–í–ï–†–ê (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π pong)
        this.wsConnection.on('ping', (data) => {
            console.log('üèì –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º pong');
            this.wsConnection.pong(data);
        });

        this.wsConnection.on('close', (code, reason) => {
            console.log(`üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω (${code}): ${reason}`);
            this.stopHeartbeat(); // ‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat

            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => this.startWebSocket(), 2000);
        });

        this.wsConnection.on('error', (error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        });
    }

    // ‚úÖ –ü–†–û–°–¢–ê–Ø –ü–û–î–ü–ò–°–ö–ê
    subscribe() {
        // –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        this.wsConnection.send(JSON.stringify({
            jsonrpc: '2.0',
            id: 1,
            method: 'accountSubscribe',
            params: [this.targetWallet.toString(), {commitment: 'confirmed'}]
        }));

        // –°–æ–±—ã—Ç–∏—è –ª–æ–≥–æ–≤
        this.wsConnection.send(JSON.stringify({
            jsonrpc: '2.0',
            id: 2,
            method: 'logsSubscribe',
            params: [{mentions: [this.targetWallet.toString()]}, {commitment: 'confirmed'}]
        }));
    }

    // ‚úÖ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
    async handleMessage(message) {
        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–†–ò –õ–Æ–ë–û–ú –°–û–û–ë–©–ï–ù–ò–ò
        // ‚úÖ –û–¢–ú–ï–ß–ê–ï–ú –ê–ö–¢–ò–í–ù–û–°–¢–¨
        this.lastActivity = Date.now();

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        if (message.method === 'accountNotification') {
            await this.handleBalanceChange(message);
            return;
        }

        // –°–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥–∞—Ö
        if (message.method === 'logsNotification') {
            await this.handleLogEvent(message);
            return;
        }
    }

    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
    async handleBalanceChange(message) {
        const newBalance = message.params.result.value.lamports;
        const oldBalance = this.lastBalance || newBalance;
        const delta = newBalance - oldBalance;

        // console.log(`üí≥ –ë–∞–ª–∞–Ω—Å: ${(newBalance / 1e9).toFixed(6)} SOL (${delta > 0 ? '+' : ''}${(delta / 1e9).toFixed(6)})`);

        // ‚úÖ –ö–†–£–ü–ù–´–ô –ò–°–•–û–î–Ø–©–ò–ô –ü–ï–†–ï–í–û–î
        if (delta < -this.minTransferLamports) {
            const amount = Math.abs(delta / 1e9);
            console.log(`üö® –ö–†–£–ü–ù–´–ô –ü–ï–†–ï–í–û–î: ${amount.toFixed(2)} SOL`);

            const recipient = await this.findRecipient(amount);
            if (recipient) {
                await this.switchTarget(recipient, amount);
            }
        }

        this.lastBalance = newBalance;
    }

    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –õ–û–ì–û–í
    async handleLogEvent(message) {
        const {signature, logs} = message.params.result.value;

        if (this.processedSignatures.has(signature)) return;
        this.processedSignatures.add(signature);

        // ‚úÖ MINT –°–û–ë–´–¢–ò–ï
        if (this.isMintEvent(logs)) {
            console.log(`üéØ Mint: ${signature}`);
            const mintAddress = await this.extractMint(signature);
            if (mintAddress) {
                console.log(`ü™ô Token: ${mintAddress}`);
                this.pendingTokens.set(mintAddress, {time: Date.now()});
            }
        }

        // ‚úÖ POOL –°–û–ë–´–¢–ò–ï
        if (this.isPoolEvent(logs)) {
            console.log(`üèä Pool: ${signature}`);
            const poolMint = await this.extractMint(signature);
            if (poolMint && this.pendingTokens.has(poolMint)) {
                console.log(`‚úÖ –ü—É–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${poolMint}`);
                await this.executePurchase(poolMint);
                this.pendingTokens.delete(poolMint);
            }
        }
    }

    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –°–û–ë–´–¢–ò–Ø
    isMintEvent(logs) {
        return logs.some(log => /Instruction: MintTo|InitializeMint/.test(log));
    }

    isPoolEvent(logs) {
        return logs.some(log => /InitializePool|CreatePool/.test(log));
    }

    // ‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï MINT –ê–î–†–ï–°–ê
    async extractMint(signature) {
        try {
            const tx = await this.getRpcData(() => this.connection.getTransaction(signature, {
                commitment: 'confirmed',
                maxSupportedTransactionVersion: 0
            }));

            if (!tx?.meta?.postTokenBalances) return null;

            // –ò—â–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ balances
            for (const balance of tx.meta.postTokenBalances) {
                const mint = balance.mint;
                if (mint && mint !== 'So11111111111111111111111111111111111111112') {
                    if (await this.isValidMint(mint)) {
                        return mint;
                    }
                }
            }
            return null;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è mint: ${error.message}`);
            return null;
        }
    }

    // ‚úÖ –ü–û–ò–°–ö –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ö–†–£–ü–ù–û–ì–û –ü–ï–†–ï–í–û–î–ê
    async findRecipient(transferAmount) {
        try {
            console.log(`üîç –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${transferAmount} SOL...`);

            const signatures = await this.getRpcData(() =>
                this.connection.getSignaturesForAddress(this.targetWallet, {limit: 2})
            );

            if (!signatures?.length) return null;

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const lastSig = signatures[0];
            if (lastSig.err) return null;

            const tx = await this.getRpcData(() => this.connection.getTransaction(lastSig.signature, {
                commitment: 'confirmed',
                maxSupportedTransactionVersion: 0
            }));

            if (!tx?.meta) return null;

            const {accountKeys} = tx.transaction.message;
            const {preBalances, postBalances} = tx.meta;

            // –ù–∞—Ö–æ–¥–∏–º –∫—Ç–æ –ø–æ–ª—É—á–∏–ª –¥–µ–Ω—å–≥–∏
            for (let i = 0; i < accountKeys.length; i++) {
                const delta = postBalances[i] - preBalances[i];
                const gain = delta / 1e9;

                if (gain >= transferAmount * 0.9) { // 90% –æ—Ç —Å—É–º–º—ã
                    const recipient = accountKeys[i].toString();
                    console.log(`‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${recipient}`);
                    return recipient;
                }
            }

            return null;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${error.message}`);
            return null;
        }
    }

    // ‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ù–û–í–´–ô –ö–û–®–ï–õ–ï–ö
    async switchTarget(newAddress, amount) {
        const oldAddress = this.targetWallet.toString();

        console.log(`üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï:`);
        console.log(`   –°—Ç–∞—Ä—ã–π: ${oldAddress}`);
        console.log(`   –ù–æ–≤—ã–π: ${newAddress}`);
        console.log(`   –°—É–º–º–∞: ${amount.toFixed(2)} SOL`);

        // –û–±–Ω–æ–≤–ª—è–µ–º target
        this.targetWallet = new PublicKey(newAddress);
        this.lastBalance = null;
        this.pendingTokens.clear();
        this.processedSignatures.clear();

        // ‚úÖ –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HEARTBEAT –ü–ï–†–ï–î –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú
        this.stopHeartbeat();

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await this.delay(1000);
        this.wsConnection.close(); // Heartbeat –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    }

    // ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø MINT
    async isValidMint(mintAddress) {
        try {
            if (this.mintCache.has(mintAddress)) {
                return this.mintCache.get(mintAddress);
            }

            const mint = await this.getRpcData(() => getMint(this.connection, new PublicKey(mintAddress)));
            const isValid = mint !== null;

            this.mintCache.set(mintAddress, isValid);
            return isValid;
        } catch {
            return false;
        }
    }

    // ‚úÖ RPC –° THROTTLING
    async getRpcData(rpcCall) {
        const elapsed = Date.now() - this.lastRpcTime;
        if (elapsed < this.rpcDelay) {
            await this.delay(this.rpcDelay - elapsed);
        }

        this.lastRpcTime = Date.now();
        return await rpcCall();
    }

    // ‚úÖ –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê
    async executePurchase(mintAddress) {
        console.log(`üí∞ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${mintAddress}`);
        // –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        return;
    }

    // ‚úÖ –£–¢–ò–õ–ò–¢–´
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');

        this.stopHeartbeat(); // ‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat

        if (this.wsConnection) {
            this.wsConnection.close();
        }
    }

    // ‚úÖ –ó–ê–ü–£–°–ö HEARTBEAT –ú–ï–•–ê–ù–ò–ó–ú–ê
    startHeartbeat() {
        this.stopHeartbeat();

        console.log(`üíó –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ heartbeat`);

        this.pingInterval = setInterval(() => {
            if (!this.wsConnection || this.wsConnection.readyState !== WebSocket.OPEN) {
                return;
            }

            // ‚úÖ PING –¢–û–õ–¨–ö–û –ï–°–õ–ò –î–ê–í–ù–û –ù–ï –ë–´–õ–û –ê–ö–¢–ò–í–ù–û–°–¢–ò
            const timeSinceActivity = Date.now() - this.lastActivity;
            const needsPing = timeSinceActivity > (this.pingIntervalMs - 5000); // –ó–∞ 5 —Å–µ–∫ –¥–æ timeout

            if (this.activityBasedPing && !needsPing) {
                this.isAlive = true; // –°—á–∏—Ç–∞–µ–º –∂–∏–≤—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                return;
            }

            if (!this.isAlive) {
                console.log('üíÄ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º...');
                this.wsConnection.terminate();
                return;
            }

            this.isAlive = false;
            console.log(`üèì –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping (–±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ ${Math.round(timeSinceActivity/1000)}—Å)`);
            this.wsConnection.ping();

            this.pongTimeout = setTimeout(() => {
                console.log('üíÄ Pong –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ');
                this.isAlive = false;
                this.wsConnection.terminate();
            }, this.pongTimeoutMs);

        }, this.pingIntervalMs);
    }

    // ‚úÖ –û–°–¢–ê–ù–û–í–ö–ê HEARTBEAT
    stopHeartbeat() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }

        if (this.pongTimeout) {
            clearTimeout(this.pongTimeout);
            this.pongTimeout = null;
        }
    }
}

module.exports = SolanaSnipeBot;
